{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","err","console","log","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"6JAciBA,EAZJ,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACI,+BACGH,EAAKI,QACN,wBAAQC,QAAWJ,EAAnB,SAAsCC,Q,gBCRxCI,EAAU,aA4BD,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAClBC,GAAI,IACJP,QAAS,mCACTQ,KAAM,2BACNT,WAAW,GAEb,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCmE5BK,EAzFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,IAEGhB,MAAK,SAAAiB,GACNP,EAASO,QAEV,IAEH,IA4CMC,EAAcL,EAClBJ,EACAA,EAAMU,QAAO,SAAAhC,GAAI,OAAIA,EAAKG,aAE5B,OACE,gCACE,uCACA,8BACE,yBAAQE,QAAS,kBAAMsB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGK,EAAYE,KAAI,SAAAjC,GAAI,OACjB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBA1CH,SAAAU,GACzB,IAAMX,EAAOsB,EAAMY,MAAK,SAAAC,GAAC,OAAIA,EAAExB,KAAOA,KAChCyB,EAAW,2BAAQpC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD0B,EACQlB,EAAIyB,GACTvB,MAAK,SAAAwB,GACNd,EAASD,EAAMW,KAAI,SAAAjC,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAOqC,SAElDC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,MAgCkBG,CAAmB1C,EAAKW,MAF3CX,EAAKW,SAMlB,uBAAMgC,SAjEM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB1C,QAASoB,EACTZ,MAAM,IAAImC,MAAOC,cACjB7C,UAAW8C,KAAKC,SAAW,IAG7BrB,EACUiB,GACLjC,MAAK,SAAAwB,GACNd,EAASD,EAAMN,OAAOqB,IACtBZ,EAAW,OAEZa,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OAkDd,UACE,uBACEY,MAAO3B,EACP4B,SA7BiB,SAACR,GACxBJ,QAAQC,IAAIG,EAAMS,OAAOF,OACzB1B,EAAWmB,EAAMS,OAAOF,UA6BpB,wBAAQG,KAAK,SAAb,yBClFRC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e107d73d.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return(\n      <li>\n        {note.content}\n        <button onClick = {toggleImportance}>{label}</button>\n      </li>\n    )\n  }\n\n  export default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll2 = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { \n  getAll, create, update\n}","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n\n    noteService\n      .create(noteObject)\n        .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n        })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n    .update(id, changedNote)\n      .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(err => {\n        console.log(err)\n      })\n    /*.catch(error => {\n      alert(\n        `the note '${note.content}' was already deleted from server`\n      )\n      setNotes(notes.filter(n => n.id !== id))\n    })    */\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>   \n      <ul>\n        {notesToShow.map(note => \n            <Note\n              key={note.id}\n              note={note} \n              toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\nimport axios from 'axios'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n/*\naxios.\n  get('http://localhost:3001/notes').\n  then(response => {\n    const notes = response.data\n    console.log(notes)\n    ReactDOM.render(\n      <App notes = {notes} />,\n      document.getElementById('root')\n    )\n  })\n*/\n\n\n/*\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n\n\nconst result = notes.map(note => note.id)\nconsole.log(result)\n\nReactDOM.render(\n  <App notes={notes} />,\n  document.getElementById('root')\n)\n*/"],"sourceRoot":""}